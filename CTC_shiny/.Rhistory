?set.vertex.attribute
graph <- set.vertex.attribute(modul_1_gomf, "name", index=V(modul_1_gomf), At$label_term)
graph
edge_modul_1_gomf
Eat<-get.edge.attribute(modul_1_gomf, index=E(modul_1_gomf))
Eat
Eat
?get.edgelist
Eat<-get.edgelist(modul_1_gomf)
Eat
set.edge.attribute
?get.edge.attribute
Eat<-edge_attr(modul_1_gomf)
Eat
Eat<-as_edgelist(modul_1_gomf)
Eat
net_modul_1_all <- createNetworkFromIgraph(modul_1_gomf)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("RCy3", lib = "C:/Users/Lingli He/Documents/R/win-library/3.6")
library(igraph)
library(RCy3)
cytoscapePing() # thi
port.number = 1234
base.url = paste("http://localhost:",toString(port.number),"/v1",sep="")
print(base.url)
cytoscapePing() # thi
net_modul_1_all <- createNetworkFromIgraph(modul_1_gomf)
modul_1_gomf
At<-get.vertex.attribute(modul_1_gomf, index=V(modul_1_gomf))
graph <- set.vertex.attribute(modul_1_gomf, "name", index=V(modul_1_gomf), At$label_term)
At<-get.vertex.attribute(modul_1_gomf, index=V(modul_1_gomf))
At
graph <- set.vertex.attribute(modul_1_gomf, "name", index=V(modul_1_gomf), "label_term")
At<-get.vertex.attribute(modul_1_gomf, index=V(modul_1_gomf))
At
modul_1_kegg <- viewEnrichMap(gsca, resultName = "GSEA.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "term")
modul_1_kegg
# extractEnrichMap()
modul_1_kegg <- extractEnrichMap(gsca, resultName = "HyperGeo.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "term")
modul_1_kegg
At<-get.vertex.attribute(modul_1_gomf, index=V(modul_1_gomf))
At
# extractEnrichMap()
modul_1_kegg <- extractEnrichMap(gsca, resultName = "HyperGeo.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "label_term")
# extractEnrichMap()
modul_1_kegg <- extractEnrichMap(gsca, resultName = "HyperGeo.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "term")
# From dataframes
nodes<-data.frame(id=c(
"node 0","node 1","node 2","node 3")
,
group=c(
"A","A","B","B"),#categorical strings
score=as.integer(
c(
20,10,15,5)),#integers
stringsAsFactors=FALSE)
edges <-data.frame(
source=c(
"node 0","node 0","node 0","node 2"),
target=c("node 1","node 2","node 3","node 3"),
interaction=c("inhibits","interacts",
"activates","interacts"),#optional
weight=c(5.1,3.0,5.2,9.9),#numerics
stringsAsFactors=FALSE)
nodes
edges
createNetworkFromDataFrames(nodes, edges)
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways", update = FALSE)
}
library(rWikiPathways)
library(rWikiPathways)
load.libs <- c(
"DOSE",
"GO.db",
"GSEABase",
"org.Hs.eg.db",
"clusterProfiler",
"dplyr",
"tidyr",
"ggplot2",
"stringr",
"RColorBrewer",
"rWikiPathways",
"RCy3")
options(install.packages.check.source = "no")
options(install.packages.compile.from.source = "never")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(load.libs, update = TRUE, character.only = TRUE)
status <- sapply(load.libs,require,character.only = TRUE)
if(all(status)){
print("SUCCESS: You have successfully installed and loaded all required libraries.")
} else{
cat("ERROR: One or more libraries failed to install correctly. Check the following list for FALSE cases and try again...\n\n")
status
}
library(clusterProfiler)
install.packages("clusterProfiler")
library(installr)
updateR()
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
library(rWikiPathways)
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways", update = FALSE)
}
install.packages("BiocManager")
library(rWikiPathways)
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways", update = FALSE)
}
library(rWikiPathways)
library(clusterProfiler)
install.packages(XML)
install.packages("XML")
library(rWikiPathways)
install.packages("caTools")
library(rWikiPathways)
install.packages("httr")
library(rWikiPathways)
library(clusterProfiler)
install.packages("AnnotationDbi")
install.packages("clusterProfiler")
install.packages("igraph")
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
library(RCy3)
library(org.Hs.eg.db)
library(rWikiPathways)
library(clusterProfiler)
library(igraph)
library(RCy3)
library(org.Hs.eg.db)
install.packages("igraph")
library(igraph)
.libPaths()
library(igraph)
library(rWikiPathways)
library(clusterProfiler)
library(igraph)
library(RCy3)
library(org.Hs.eg.db)
library(rWikiPathways)
install.packages("rWikiPathways")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
library(rWikiPathways)
library(clusterProfiler)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library(clusterProfiler)
install.packages("rlang")
library(clusterProfiler)
library(RCy3)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_VS_g76_dox_rna.RData")
report(gsca)
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_dox_VS_g76_dox_rna.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/g76_CT_CTdoxVS_g76dox_mRNA.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/g76_CT_CTdoxVS_g76dox.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_VS_g76_dox.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_VS_g76_dox_mRNA.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_dox_VS_g76_dox.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_dox_VS_g76_dox_mRNA.diff")
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_dox_VS_g76_dox_mRNA.diff")
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_dox_VS_g76_dox_mRNA.diff.RData")
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_dox_VS_g76_dox_mRNA.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/g76_VS_g76_dox.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/g76_VS_g76_dox_mRNA.diff.RData")
report(gsca)
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways", update = FALSE)
}
library(rWikiPathways)
cytoscapePing()
load.libs <- c(
"DOSE",
"GO.db",
"GSEABase",
"org.Hs.eg.db",
"clusterProfiler",
"dplyr",
"tidyr",
"ggplot2",
"stringr",
"RColorBrewer",
"rWikiPathways",
"RCy3")
options(install.packages.check.source = "no")
options(install.packages.compile.from.source = "never")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(load.libs, update = TRUE, character.only = TRUE)
status <- sapply(load.libs,require,character.only = TRUE)
if(all(status)){
print("SUCCESS: You have successfully installed and loaded all required libraries.")
} else{
cat("ERROR: One or more libraries failed to install correctly. Check the following list for FALSE cases and try again...\n\n")
status
}
cytoscapePing()
lung.expr <- read.csv(system.file("extdata","data-lung-cancer.csv", package="rWikiPathways"),stringsAsFactors = FALSE)
nrow(lung.expr)
head(lung.expr)
up.genes <- lung.expr[lung.expr$log2FC > 1 & lung.expr$adj.P.Value < 0.05, 1]
dn.genes <- lung.expr[lung.expr$log2FC < -1 & lung.expr$adj.P.Value < 0.05, 1]
bkgd.genes <- lung.expr[,1]
up.genes.entrez <- clusterProfiler::bitr(up.genes,fromType = "ENSEMBL",toType = "ENTREZID",OrgDb = org.Hs.eg.db)
cat("\n\nWhich column contains my new Entrez IDs?\n")
head(up.genes.entrez)
keytypes(org.Hs.eg.db)
dn.genes.entrez <- bitr(dn.genes,fromType = "ENSEMBL",toType = "ENTREZID",OrgDb = org.Hs.eg.db)
bkgd.genes.entrez <- bitr(bkgd.genes,fromType = "ENSEMBL",toType = "ENTREZID",OrgDb = org.Hs.eg.db)
egobp <- clusterProfiler::enrichGO(
gene     = up.genes.entrez[[2]],
universe = bkgd.genes.entrez[[2]],
OrgDb    = org.Hs.eg.db,
ont      = "BP",
pAdjustMethod = "fdr",
pvalueCutoff = 0.05, #p.adjust cutoff (https://github.com/GuangchuangYu/clusterProfiler/issues/104)
readable = TRUE)
head(egobp,10)
barplot(egobp, showCategory = 20)
dotplot(egobp, showCategory = 20)
emapplot(egobp, showCategory = 20)
goplot(egobp)
ggplot(egobp[1:20], aes(x=reorder(Description, -pvalue), y=Count, fill=-p.adjust)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_continuous(low="blue", high="red") +
labs(x = "", y = "", fill = "p.adjust") +
theme(axis.text=element_text(size=11))
wp.hs.gmt <- rWikiPathways::downloadPathwayArchive(organism="Homo sapiens", format = "gmt")
# supported organisms (and case-dependent spelling)...
listOrganisms()
wp2gene <- clusterProfiler::read.gmt(wp.hs.gmt)
wp2gene <- wp2gene %>% tidyr::separate(ont, c("name","version","wpid","org"), "%")
wpid2gene <- wp2gene %>% dplyr::select(wpid,gene) #TERM2GENE
wpid2name <- wp2gene %>% dplyr::select(wpid,name) #TERM2NAME
wpid2gene
wpid2name
ewp.up <- clusterProfiler::enricher(
up.genes.entrez[[2]],
universe = bkgd.genes.entrez[[2]],
pAdjustMethod = "fdr",
pvalueCutoff = 0.1, #p.adjust cutoff; relaxed for demo purposes
TERM2GENE = wpid2gene,
TERM2NAME = wpid2name)
head(ewp.up)
ewp.up <- DOSE::setReadable(ewp.up, org.Hs.eg.db, keytype = "ENTREZID")
?DOSE::setReadable
ewp.up <- DOSE::setReadable(ewp.up, org.Hs.eg.db, keytype = "auto")
ewp.up <- DOSE::setReadable(ewp.up, org.Hs.eg.db)
ewp.up <- DOSE::setReadable(ewp.up, org.Hs.eg.db, keytype = "ENTREZID")
ewp.up <- DOSE::setReadable(ewp.up, org.Hs.eg.db, keytype = ENTREZID)
ewp.up <- setReadable(ewp.up, org.Hs.eg.db, keytype = "ENTREZID")
head(ewp.up)
barplot(ewp.up, showCategory = 20)
dotplot(ewp.up, showCategory = 20)
emapplot(ewp.up, showCategory = 20)
ewp.dn <- enricher(
dn.genes.entrez[[2]],
#universe = bkgd.genes[[2]],  #hint: comment out to get any results for demo
pAdjustMethod = "fdr",
pvalueCutoff = 0.1, #p.adjust cutoff; relaxed for demo purposes
TERM2GENE = wpid2gene,
TERM2NAME = wpid2name)
ewp.dn <- setReadable(ewp.dn, org.Hs.eg.db, keytype = "ENTREZID")
head(ewp.dn)
dotplot(ewp.dn, showCategory = 20)
lung.expr$fcsign <- sign(lung.expr$log2FC)
lung.expr$logfdr <- -log10(lung.expr$P.Value)
lung.expr$sig <- lung.expr$logfdr/lung.expr$fcsign
sig.lung.expr.entrez<-merge(lung.expr, bkgd.genes.entrez, by.x = "GeneID", by.y = "ENSEMBL")
lung.expr
bkgd.genes.entrez
sig.lung.expr.entrez<-merge(lung.expr, bkgd.genes.entrez, by.x = "ï..GeneID", by.y = "ENSEMBL")
gsea.sig.lung.expr <- sig.lung.expr.entrez[,8]
names(gsea.sig.lung.expr) <- as.character(sig.lung.expr.entrez[,9])
gsea.sig.lung.expr <- sort(gsea.sig.lung.expr,decreasing = TRUE)
gwp.sig.lung.expr <- clusterProfiler::GSEA(
gsea.sig.lung.expr,
pAdjustMethod = "fdr",
pvalueCutoff = 0.05, #p.adjust cutoff
TERM2GENE = wpid2gene,
TERM2NAME = wpid2name)
gwp.sig.lung.expr.df = data.frame(ID=gwp.sig.lung.expr$ID,
Description=gwp.sig.lung.expr$Description,
enrichmentScore=gwp.sig.lung.expr$enrichmentScore,
NES=gwp.sig.lung.expr$NES,
pvalue=gwp.sig.lung.expr$pvalue,
p.adjust=gwp.sig.lung.expr$p.adjust,
rank=gwp.sig.lung.expr$rank,
leading_edge=gwp.sig.lung.expr$leading_edge
)
gwp.sig.lung.expr.df[which(gwp.sig.lung.expr.df$NES > 1),] #pathways enriched for upregulated lung cancer genes
gwp.sig.lung.expr.df[which(gwp.sig.lung.expr.df$NES < -1),] #pathways enriched for downregulated lung cancer genes
findPathwayNamesByText("lung cancer")
lc.pathways <- findPathwaysByText('"lung cancer"')  #quotes inside query to require both terms
human.filter <- lapply(lc.pathways, function(x) x$species == "Homo sapiens")
human.lc.pathways <- lc.pathways[unlist(human.filter)] # just the human lung cancer pathways
sapply(human.lc.pathways, function(x) x$name) # display the pathway titles
lc.wpids <- sapply(human.lc.pathways, function(x) x$id)
lc.wpids
ewp.up.wpids <- ewp.up$ID
ewp.up.wpids
url <- getPathwayInfo("WP179")[2]
browseURL(url)
url <- getPathwayInfo("WP179")[2]
url
browseURL(url)
url
browseURL("https://www.wikipathways.org/index.php/Pathway:WP179")
cytoscapePing()
RCy3::commandsRun('wikipathways import-as-pathway id=WP179')
toggleGraphicsDetails()
loadTableData(lung.expr, data.key.column = "GeneID", table.key.column = "Ensembl")
min.lung.expr = min(lung.expr["log2FC"],na.rm=TRUE)
max.lung.expr = max(lung.expr["log2FC"],na.rm=TRUE)
abs.lung.expr = max(abs(min.lung.expr),max.lung.expr)
loadTableData(lung.expr, data.key.column = "GeneID", table.key.column = "Ensembl")
lung.expr
loadTableData(lung.expr, data.key.column = "ï..GeneID", table.key.column = "Ensembl")
loadTableData(lung.expr, data.key.column = "GeneID", table.key.column = "Ensembl")
lung.expr
loadTableData(lung.expr, data.key.column = "GeneName", table.key.column = "Ensembl")
loadTableData(lung.expr, data.key.column = "GeneName", table.key.column = "ï..GeneID")
loadTableData(lung.expr, data.key.column = "ï..GeneID", table.key.column = "Ensembl")
loadTableData(lung.expr, data.key.column = "GeneID", table.key.column = "Ensembl")
colnames(lung.expr)
colnames(lung.expr)<-c("GeneID","GeneName","log2FC","P.Value","adj.P.Value","fcsign","logfdr","sig")
loadTableData(lung.expr, data.key.column = "GeneID", table.key.column = "Ensembl")
min.lung.expr = min(lung.expr["log2FC"],na.rm=TRUE)
max.lung.expr = max(lung.expr["log2FC"],na.rm=TRUE)
abs.lung.expr = max(abs(min.lung.expr),max.lung.expr)
data.values = c(-abs.lung.expr,0,abs.lung.expr)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping("log2FC", data.values, node.colors, default.color = "#FFFFFF", style.name = "WikiPathways")
data.values<-c(-5,0,5)
setNodeColorMapping("log2FC", data.values, node.colors, default.color = "#FFFFFF", style.name = "WikiPathways")
lapply(ewp.up.wpids, function (x) {
commandsRun(paste0('wikipathways import-as-pathway id=',x))
loadTableData(lung.expr, data.key.column = "GeneID", table.key.column = "Ensembl")
toggleGraphicsDetails()
})
lapply(lc.wpids, function (x){
commandsRun(paste0('wikipathways import-as-pathway id=',x))
loadTableData(lung.expr, data.key.column = "GeneID", table.key.column = "Ensembl")
toggleGraphicsDetails()
})
library(igraph)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/g76_VS_g76_dox_mRNA.diff.RData")
# modul_1_kegg <- viewEnrichMap(gsca, resultName = "GSEA.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "term")
# modul_1_kegg
# extractEnrichMap()
GSEA_kegg <- extractEnrichMap(gsca, resultName = "GSEA.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "term")
GSEA_kegg
GSEA_gomf <- extractEnrichMap(gsca, resultName = "GSEA.results", gscs=c("GO_MF"),allSig = TRUE, gsNameType = "id")
GSEA_gobp <- extractEnrichMap(gsca, resultName = "GSEA.results", gscs=c("GO_BP"),allSig = TRUE, gsNameType = "term")
GSEA_c2<- extractEnrichMap(gsca, resultName = "GSEA.results", gscs=c("Msig_c2"),allSig = TRUE, gsNameType = "term")
GSEA_all <- extractEnrichMap(gsca, resultName = "GSEA.results", gscs=c("GO_BP", "GO_MF", "PW_KEGG"),allSig = TRUE, gsNameType = "term")
# For creating json and communicating with cytoscape
tryCatch(expr = { library("httr")},
error = function(e) { install.packages("httr")},
finally = library("httr"))
tryCatch(expr = { library("RJSONIO")},
error = function(e) { install.packages("RJSONIO")},
finally = library("RJSONIO"))
library(RCy3)
port.number = 1234
base.url = paste("http://localhost:",toString(port.number),"/v1",sep="")
print(base.url)
cytoscapePing() # thi
cytoscapePing() # thi
GSEA_kegg_net <- createNetworkFromIgraph(Hy_kegg)
GSEA_kegg_net <- createNetworkFromIgraph(GSEA_all)
GSEA_all <- extractEnrichMap(gsca, resultName = "GSEA.results", gscs=c("GO_BP", "GO_MF", "PW_KEGG","Msig_c2","Msig_c5"),allSig = TRUE, gsNameType = "term")
cytoscapePing() # thi
GSEA_kegg_net <- createNetworkFromIgraph(GSEA_all)
report(gsca)
modul_1_kegg <- viewEnrichMap(gsca, resultName = "GSEA.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "term")
modul_1_kegg
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_dox_VS_g76_dox.diff.RData")
report(gsca)
modul_1_kegg <- viewEnrichMap(gsca, resultName = "GSEA.results", gscs=c("PW_KEGG"),allSig = TRUE, gsNameType = "term")
modul_1_kegg
GSEA_c2 <- extractEnrichMap(gsca, resultName = "GSEA.results", gscs=c("Msig_c2"),allSig = TRUE, gsNameType = "term")
GSEA_c2
Hy_c2 <- extractEnrichMap(gsca, resultName = "HyperGeo.results", gscs=c("Msig_c2"),allSig = TRUE, gsNameType = "term")
cytoscapePing() # thi
GSEA_kegg_net <- createNetworkFromIgraph(GSEA_c2)
GSEA_c2_net <- createNetworkFromIgraph(GSEA_c2)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/CT_VS_g76_dox.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/g76_CT_CTdoxVS_g76dox.diff.RData")
report(gsca)
load("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/TCOF1_mRNA/g76_VS_g76_dox.diff.RData")
report(gsca)
library(power)
6/20
2+10+15+16+15+6+7+9+10+13
103/25
a<-c(2,10,15,16,15,6,7,9,10,13)
summary(a)
sd(a)
a<-c(0,1,1,rep(2,5),rep(3,5),rep(4,4),rep(5,3),6,7,9,10,13)
b<-c(rep(0,16),1,1,2,2)
summary(a)
summary(b)
c<-cbind(a,b)
c<-rbind(a,b)
c<-c(a,b)
sd(c)
summary(a)
summary(b)
4.12-0.3
power.t.test(power=0.9,delta=3.82,sd=2.965628,type="two.sample")
sd(b)
sd(a)
power.t.test(power=0.9,delta=3.82,sd=3.004441,type="two.sample")
?power.t.test
25/45
sd(c)
sd(a)
ad(b)
sd(b)
?n.ttest
library(samplesize)
install.packages(samplesize)
install.packages("samplesize")
WMWssp(b, a, alpha = 0.05, power = 0.9, t = 0.555,
simulation = FALSE, nsim = 10^4)
install.packages("WMWssp")
library(WMWssp)
library(samplesize)
WMWssp(b, a, alpha = 0.05, power = 0.9, t = 0.555,
simulation = FALSE, nsim = 10^4)
res<-WMWssp(b, a, alpha = 0.05, power = 0.9, t = 0.555,
simulation = FALSE, nsim = 10^4)
summary(res)
20/45
res<-WMWssp(b, a, alpha = 0.05, power = 0.9, t = 0.3,
simulation = FALSE, nsim = 10^4)
summary(res)
library(xlsx)
install.packages("xlsx")
library(xlsx)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-14/jre')
library(xlsx)
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_251')
Sys.getenv("JAVA_HOME")
library(xlsx)
library(rJava)
Sys.getenv("DYLD_LIBRARY_PATH")
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
install.packages(rJava)
install.packages("rJava")
library(xlsx)
install.packages("xlsx")
reticulate::py_config()
shiny::runApp('CTC_Image/02_shiny/test')
runApp('CTC_Image/02_shiny/uplaod')
install.packages("later")
tools::checkMD5sums("httpuv")
tools::checkMD5sums("htmltools")
install.packages("devtools")
install.packages("digest")
install.packages("withr")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
shiny::runApp('CTC_Image/02_shiny/uplaod')
Sys.setenv(RETICULATE_PYTHON = "C:\\Users\\10158\\Anaconda3\\envs\\CTC_web\\python.exe")
runApp('CTC_Image/02_shiny/uplaod')
shiny::runApp('CTC_Image/02_shiny/uplaod')
shiny::runApp('CTC_Image/02_shiny/CTC_web_app')
Sys.setenv(RETICULATE_PYTHON = "C:\\Users\\10158\\Anaconda3\\envs\\CTC_web\\python.exe")
runApp('CTC_Image/02_shiny/CTC_web_app')
reticulate::py_config()
setwd("C:/Users/10158/OneDrive - City University of Hong Kong/ProgramCode/CTC_Image/02_shiny/CTC/CTC_shiny")
shiny::runApp()
